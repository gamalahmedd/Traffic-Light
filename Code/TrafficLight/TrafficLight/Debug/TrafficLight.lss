
TrafficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000bda  00000c6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  00000c7e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000013d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f62  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000040b  00000000  00000000  0000247a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082a  00000000  00000000  00002885  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  000030b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000413  00000000  00000000  00003340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009da  00000000  00000000  00003753  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3e 05 	call	0xa7c	; 0xa7c <main>
  8a:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPinDir>:
#include "MACROS.h"
#include <avr/io.h>

void DIO_vsetPinDir(unsigned char portname, unsigned char pinnumber, unsigned char direction)
{
	switch(portname)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vsetPinDir+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_vsetPinDir+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vsetPinDir+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vsetPinDir+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vsetPinDir+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_vsetPinDir+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_vsetPinDir+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vsetPinDir+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vsetPinDir+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vsetPinDir+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vsetPinDir+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vsetPinDir+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vsetPinDir+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vsetPinDir+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vsetPinDir+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_vsetPinDir+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_vsetPinDir+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vsetPinDir+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_vsetPinDir+0xe8>
	{
		case 'A':
		case 'a':
			if(direction == 1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_vsetPinDir+0x58>
			{
				SET_BIT(DDRA, pinnumber);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vsetPinDir+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vsetPinDir+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRA, pinnumber);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vsetPinDir+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vsetPinDir+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if(direction == 1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_vsetPinDir+0x92>
			{
				SET_BIT(DDRB, pinnumber);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vsetPinDir+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vsetPinDir+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRB, pinnumber);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vsetPinDir+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vsetPinDir+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if(direction == 1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_vsetPinDir+0xcc>
			{
				SET_BIT(DDRC, pinnumber);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vsetPinDir+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vsetPinDir+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRC, pinnumber);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vsetPinDir+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vsetPinDir+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if(direction == 1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vsetPinDir+0x106>
			{
				SET_BIT(DDRD, pinnumber);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vsetPinDir+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vsetPinDir+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRD, pinnumber);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vsetPinDir+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vsetPinDir+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_vWritePin>:
	}
}

void DIO_vWritePin(unsigned char portname, unsigned char pinnumber, unsigned char output_value)
{
	switch(portname)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vWritePin+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_vWritePin+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_vWritePin+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_vWritePin+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vWritePin+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_vWritePin+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vWritePin+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_vWritePin+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_vWritePin+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_vWritePin+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_vWritePin+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_vWritePin+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_vWritePin+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_vWritePin+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_vWritePin+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_vWritePin+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_vWritePin+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_vWritePin+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_vWritePin+0xe8>
	{
		case 'A':
		case 'a':
			if(output_value == 1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_vWritePin+0x58>
			{
				SET_BIT(PORTA, pinnumber);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_vWritePin+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_vWritePin+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA, pinnumber);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vWritePin+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vWritePin+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if(output_value == 1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_vWritePin+0x92>
			{
				SET_BIT(PORTB, pinnumber);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vWritePin+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vWritePin+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB, pinnumber);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vWritePin+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vWritePin+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if(output_value == 1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_vWritePin+0xcc>
			{
				SET_BIT(PORTC, pinnumber);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vWritePin+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vWritePin+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC, pinnumber);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vWritePin+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vWritePin+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
			}	
			break;
		case 'D':
		case 'd':
			if(output_value == 1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_vWritePin+0x106>
			{
				SET_BIT(PORTD, pinnumber);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vWritePin+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vWritePin+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
			}			
			else
			{
				CLR_BIT(PORTD, pinnumber);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vWritePin+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vWritePin+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_vTogglePin>:
	}
}

void DIO_vTogglePin(unsigned char portname, unsigned char pinnumber)
{
	switch(portname)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_vTogglePin+0x6>
 2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_vTogglePin+0x80>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_vTogglePin+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	f9 f0       	breq	.+62     	; 0x322 <DIO_vTogglePin+0x4c>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	50 f5       	brcc	.+84     	; 0x33c <DIO_vTogglePin+0x66>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_vTogglePin+0x18>
 2ec:	40 c0       	rjmp	.+128    	; 0x36e <DIO_vTogglePin+0x98>
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_vTogglePin+0x32>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_vTogglePin+0x4c>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <DIO_vTogglePin+0x28>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	c9 f5       	brne	.+114    	; 0x36e <DIO_vTogglePin+0x98>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_vTogglePin+0x32>
 2fe:	83 36       	cpi	r24, 0x63	; 99
 300:	e9 f0       	breq	.+58     	; 0x33c <DIO_vTogglePin+0x66>
 302:	84 36       	cpi	r24, 0x64	; 100
 304:	a1 f5       	brne	.+104    	; 0x36e <DIO_vTogglePin+0x98>
 306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_vTogglePin+0x80>
	{
		case 'A':
		case 'a':
			TOG_BIT(PORTA, pinnumber);
 308:	2b b3       	in	r18, 0x1b	; 27
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ac 01       	movw	r20, r24
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_vTogglePin+0x40>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_vTogglePin+0x3c>
 31a:	ba 01       	movw	r22, r20
 31c:	62 27       	eor	r22, r18
 31e:	6b bb       	out	0x1b, r22	; 27
			break;
 320:	08 95       	ret
		case 'B':
		case 'b':
			TOG_BIT(PORTB, pinnumber);
 322:	28 b3       	in	r18, 0x18	; 24
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	ac 01       	movw	r20, r24
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_vTogglePin+0x5a>
 32c:	44 0f       	add	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_vTogglePin+0x56>
 334:	ba 01       	movw	r22, r20
 336:	62 27       	eor	r22, r18
 338:	68 bb       	out	0x18, r22	; 24
			break;
 33a:	08 95       	ret
		case 'C':
		case 'c':
			TOG_BIT(PORTC, pinnumber);
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_vTogglePin+0x74>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_vTogglePin+0x70>
 34e:	ba 01       	movw	r22, r20
 350:	62 27       	eor	r22, r18
 352:	65 bb       	out	0x15, r22	; 21
			break;
 354:	08 95       	ret
		case 'D':
		case 'd':
			TOG_BIT(PORTD, pinnumber);
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	ac 01       	movw	r20, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_vTogglePin+0x8e>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_vTogglePin+0x8a>
 368:	ba 01       	movw	r22, r20
 36a:	62 27       	eor	r22, r18
 36c:	62 bb       	out	0x12, r22	; 18
 36e:	08 95       	ret

00000370 <DIO_u8ReadPin>:
}

unsigned char DIO_u8ReadPin(unsigned char portname, unsigned char pinnumber)
{
	unsigned char return_value = 0;
	switch(portname)
 370:	84 34       	cpi	r24, 0x44	; 68
 372:	09 f4       	brne	.+2      	; 0x376 <DIO_u8ReadPin+0x6>
 374:	4e c0       	rjmp	.+156    	; 0x412 <DIO_u8ReadPin+0xa2>
 376:	85 34       	cpi	r24, 0x45	; 69
 378:	40 f4       	brcc	.+16     	; 0x38a <DIO_u8ReadPin+0x1a>
 37a:	82 34       	cpi	r24, 0x42	; 66
 37c:	31 f1       	breq	.+76     	; 0x3ca <DIO_u8ReadPin+0x5a>
 37e:	83 34       	cpi	r24, 0x43	; 67
 380:	b0 f5       	brcc	.+108    	; 0x3ee <DIO_u8ReadPin+0x7e>
 382:	81 34       	cpi	r24, 0x41	; 65
 384:	09 f0       	breq	.+2      	; 0x388 <DIO_u8ReadPin+0x18>
 386:	57 c0       	rjmp	.+174    	; 0x436 <DIO_u8ReadPin+0xc6>
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <DIO_u8ReadPin+0x36>
 38a:	82 36       	cpi	r24, 0x62	; 98
 38c:	f1 f0       	breq	.+60     	; 0x3ca <DIO_u8ReadPin+0x5a>
 38e:	83 36       	cpi	r24, 0x63	; 99
 390:	20 f4       	brcc	.+8      	; 0x39a <DIO_u8ReadPin+0x2a>
 392:	81 36       	cpi	r24, 0x61	; 97
 394:	09 f0       	breq	.+2      	; 0x398 <DIO_u8ReadPin+0x28>
 396:	4f c0       	rjmp	.+158    	; 0x436 <DIO_u8ReadPin+0xc6>
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <DIO_u8ReadPin+0x36>
 39a:	83 36       	cpi	r24, 0x63	; 99
 39c:	41 f1       	breq	.+80     	; 0x3ee <DIO_u8ReadPin+0x7e>
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <DIO_u8ReadPin+0x34>
 3a2:	49 c0       	rjmp	.+146    	; 0x436 <DIO_u8ReadPin+0xc6>
 3a4:	36 c0       	rjmp	.+108    	; 0x412 <DIO_u8ReadPin+0xa2>
	{
		case 'A':
		case 'a':
			return_value = READ_BIT(PINA, pinnumber);
 3a6:	29 b3       	in	r18, 0x19	; 25
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	06 2e       	mov	r0, r22
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_u8ReadPin+0x44>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_u8ReadPin+0x40>
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	82 23       	and	r24, r18
 3bc:	93 23       	and	r25, r19
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8ReadPin+0x54>
 3c0:	95 95       	asr	r25
 3c2:	87 95       	ror	r24
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8ReadPin+0x50>
			break;
 3c8:	08 95       	ret
		case 'B':
		case 'b':
			return_value = READ_BIT(PINB, pinnumber);
 3ca:	26 b3       	in	r18, 0x16	; 22
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	06 2e       	mov	r0, r22
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_u8ReadPin+0x68>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_u8ReadPin+0x64>
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	82 23       	and	r24, r18
 3e0:	93 23       	and	r25, r19
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_u8ReadPin+0x78>
 3e4:	95 95       	asr	r25
 3e6:	87 95       	ror	r24
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_u8ReadPin+0x74>
			break;
 3ec:	08 95       	ret
		case 'C':
		case 'c':
			return_value = READ_BIT(PINC, pinnumber);
 3ee:	23 b3       	in	r18, 0x13	; 19
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	06 2e       	mov	r0, r22
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_u8ReadPin+0x8c>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_u8ReadPin+0x88>
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	82 23       	and	r24, r18
 404:	93 23       	and	r25, r19
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_u8ReadPin+0x9c>
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_u8ReadPin+0x98>
			break;
 410:	08 95       	ret
		case 'D':
		case 'd':
			return_value = READ_BIT(PIND, pinnumber);
 412:	20 b3       	in	r18, 0x10	; 16
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	06 2e       	mov	r0, r22
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_u8ReadPin+0xb0>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_u8ReadPin+0xac>
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	82 23       	and	r24, r18
 428:	93 23       	and	r25, r19
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_u8ReadPin+0xc0>
 42c:	95 95       	asr	r25
 42e:	87 95       	ror	r24
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_u8ReadPin+0xbc>
			break;
 434:	08 95       	ret
	}
}

unsigned char DIO_u8ReadPin(unsigned char portname, unsigned char pinnumber)
{
	unsigned char return_value = 0;
 436:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			break;
	}
	return return_value;
}
 438:	08 95       	ret

0000043a <DIO_vSetPortDirection>:

void DIO_vSetPortDirection(unsigned char portname, unsigned char direction)
{
	switch(portname)
 43a:	84 34       	cpi	r24, 0x44	; 68
 43c:	d9 f0       	breq	.+54     	; 0x474 <DIO_vSetPortDirection+0x3a>
 43e:	85 34       	cpi	r24, 0x45	; 69
 440:	38 f4       	brcc	.+14     	; 0x450 <DIO_vSetPortDirection+0x16>
 442:	82 34       	cpi	r24, 0x42	; 66
 444:	99 f0       	breq	.+38     	; 0x46c <DIO_vSetPortDirection+0x32>
 446:	83 34       	cpi	r24, 0x43	; 67
 448:	98 f4       	brcc	.+38     	; 0x470 <DIO_vSetPortDirection+0x36>
 44a:	81 34       	cpi	r24, 0x41	; 65
 44c:	a1 f4       	brne	.+40     	; 0x476 <DIO_vSetPortDirection+0x3c>
 44e:	0c c0       	rjmp	.+24     	; 0x468 <DIO_vSetPortDirection+0x2e>
 450:	82 36       	cpi	r24, 0x62	; 98
 452:	61 f0       	breq	.+24     	; 0x46c <DIO_vSetPortDirection+0x32>
 454:	83 36       	cpi	r24, 0x63	; 99
 456:	18 f4       	brcc	.+6      	; 0x45e <DIO_vSetPortDirection+0x24>
 458:	81 36       	cpi	r24, 0x61	; 97
 45a:	69 f4       	brne	.+26     	; 0x476 <DIO_vSetPortDirection+0x3c>
 45c:	05 c0       	rjmp	.+10     	; 0x468 <DIO_vSetPortDirection+0x2e>
 45e:	83 36       	cpi	r24, 0x63	; 99
 460:	39 f0       	breq	.+14     	; 0x470 <DIO_vSetPortDirection+0x36>
 462:	84 36       	cpi	r24, 0x64	; 100
 464:	41 f4       	brne	.+16     	; 0x476 <DIO_vSetPortDirection+0x3c>
 466:	06 c0       	rjmp	.+12     	; 0x474 <DIO_vSetPortDirection+0x3a>
	{
		case 'A':
		case 'a':
			DDRA = direction;
 468:	6a bb       	out	0x1a, r22	; 26
			break;
 46a:	08 95       	ret
		case 'B':
		case 'b':
			DDRB = direction;
 46c:	67 bb       	out	0x17, r22	; 23
			break;
 46e:	08 95       	ret
		case 'C':
		case 'c':
			DDRC = direction;
 470:	64 bb       	out	0x14, r22	; 20
			break;
 472:	08 95       	ret
		case 'D':
		case 'd':
			DDRD = direction;
 474:	61 bb       	out	0x11, r22	; 17
 476:	08 95       	ret

00000478 <DIO_vWritePort>:
	}
}

void DIO_vWritePort(unsigned char portname, unsigned char portvalue)
{
	switch(portname)
 478:	84 34       	cpi	r24, 0x44	; 68
 47a:	d9 f0       	breq	.+54     	; 0x4b2 <DIO_vWritePort+0x3a>
 47c:	85 34       	cpi	r24, 0x45	; 69
 47e:	38 f4       	brcc	.+14     	; 0x48e <DIO_vWritePort+0x16>
 480:	82 34       	cpi	r24, 0x42	; 66
 482:	99 f0       	breq	.+38     	; 0x4aa <DIO_vWritePort+0x32>
 484:	83 34       	cpi	r24, 0x43	; 67
 486:	98 f4       	brcc	.+38     	; 0x4ae <DIO_vWritePort+0x36>
 488:	81 34       	cpi	r24, 0x41	; 65
 48a:	a1 f4       	brne	.+40     	; 0x4b4 <DIO_vWritePort+0x3c>
 48c:	0c c0       	rjmp	.+24     	; 0x4a6 <DIO_vWritePort+0x2e>
 48e:	82 36       	cpi	r24, 0x62	; 98
 490:	61 f0       	breq	.+24     	; 0x4aa <DIO_vWritePort+0x32>
 492:	83 36       	cpi	r24, 0x63	; 99
 494:	18 f4       	brcc	.+6      	; 0x49c <DIO_vWritePort+0x24>
 496:	81 36       	cpi	r24, 0x61	; 97
 498:	69 f4       	brne	.+26     	; 0x4b4 <DIO_vWritePort+0x3c>
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <DIO_vWritePort+0x2e>
 49c:	83 36       	cpi	r24, 0x63	; 99
 49e:	39 f0       	breq	.+14     	; 0x4ae <DIO_vWritePort+0x36>
 4a0:	84 36       	cpi	r24, 0x64	; 100
 4a2:	41 f4       	brne	.+16     	; 0x4b4 <DIO_vWritePort+0x3c>
 4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <DIO_vWritePort+0x3a>
	{
		case 'A':
		case 'a':
			PORTA = portvalue;
 4a6:	6b bb       	out	0x1b, r22	; 27
			break;
 4a8:	08 95       	ret
		case 'B':
		case 'b':
			PORTB = portvalue;
 4aa:	68 bb       	out	0x18, r22	; 24
			break;
 4ac:	08 95       	ret
		case 'C':
		case 'c':
			PORTC = portvalue;
 4ae:	65 bb       	out	0x15, r22	; 21
			break;
 4b0:	08 95       	ret
		case 'D':
		case 'd':
			PORTD = portvalue;
 4b2:	62 bb       	out	0x12, r22	; 18
 4b4:	08 95       	ret

000004b6 <DIO_u8ReadPort>:
}

unsigned char DIO_u8ReadPort(unsigned char portname)
{
	unsigned char return_value = 0;
	switch(portname)
 4b6:	84 34       	cpi	r24, 0x44	; 68
 4b8:	d9 f0       	breq	.+54     	; 0x4f0 <DIO_u8ReadPort+0x3a>
 4ba:	85 34       	cpi	r24, 0x45	; 69
 4bc:	38 f4       	brcc	.+14     	; 0x4cc <DIO_u8ReadPort+0x16>
 4be:	82 34       	cpi	r24, 0x42	; 66
 4c0:	99 f0       	breq	.+38     	; 0x4e8 <DIO_u8ReadPort+0x32>
 4c2:	83 34       	cpi	r24, 0x43	; 67
 4c4:	98 f4       	brcc	.+38     	; 0x4ec <DIO_u8ReadPort+0x36>
 4c6:	81 34       	cpi	r24, 0x41	; 65
 4c8:	a9 f4       	brne	.+42     	; 0x4f4 <DIO_u8ReadPort+0x3e>
 4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <DIO_u8ReadPort+0x2e>
 4cc:	82 36       	cpi	r24, 0x62	; 98
 4ce:	61 f0       	breq	.+24     	; 0x4e8 <DIO_u8ReadPort+0x32>
 4d0:	83 36       	cpi	r24, 0x63	; 99
 4d2:	18 f4       	brcc	.+6      	; 0x4da <DIO_u8ReadPort+0x24>
 4d4:	81 36       	cpi	r24, 0x61	; 97
 4d6:	71 f4       	brne	.+28     	; 0x4f4 <DIO_u8ReadPort+0x3e>
 4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <DIO_u8ReadPort+0x2e>
 4da:	83 36       	cpi	r24, 0x63	; 99
 4dc:	39 f0       	breq	.+14     	; 0x4ec <DIO_u8ReadPort+0x36>
 4de:	84 36       	cpi	r24, 0x64	; 100
 4e0:	49 f4       	brne	.+18     	; 0x4f4 <DIO_u8ReadPort+0x3e>
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <DIO_u8ReadPort+0x3a>
	{
		case 'A':
		case 'a':
			return_value = PINA;
 4e4:	89 b3       	in	r24, 0x19	; 25
			break;
 4e6:	08 95       	ret
		case 'B':
		case 'b':
			return_value = PINB;
 4e8:	86 b3       	in	r24, 0x16	; 22
			break;
 4ea:	08 95       	ret
		case 'C':
		case 'c':
			return_value = PINC;
 4ec:	83 b3       	in	r24, 0x13	; 19
			break;
 4ee:	08 95       	ret
		case 'D':
		case 'd':
			return_value = PIND;
 4f0:	80 b3       	in	r24, 0x10	; 16
			break;
 4f2:	08 95       	ret
	}
}

unsigned char DIO_u8ReadPort(unsigned char portname)
{
	unsigned char return_value = 0;
 4f4:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			break;
	}
	return return_value;
}
 4f6:	08 95       	ret

000004f8 <DIO_vTogglePort>:

void DIO_vTogglePort(unsigned char portname)
{
	switch (portname)
 4f8:	84 34       	cpi	r24, 0x44	; 68
 4fa:	09 f1       	breq	.+66     	; 0x53e <DIO_vTogglePort+0x46>
 4fc:	85 34       	cpi	r24, 0x45	; 69
 4fe:	38 f4       	brcc	.+14     	; 0x50e <DIO_vTogglePort+0x16>
 500:	82 34       	cpi	r24, 0x42	; 66
 502:	a9 f0       	breq	.+42     	; 0x52e <DIO_vTogglePort+0x36>
 504:	83 34       	cpi	r24, 0x43	; 67
 506:	b8 f4       	brcc	.+46     	; 0x536 <DIO_vTogglePort+0x3e>
 508:	81 34       	cpi	r24, 0x41	; 65
 50a:	e1 f4       	brne	.+56     	; 0x544 <DIO_vTogglePort+0x4c>
 50c:	0c c0       	rjmp	.+24     	; 0x526 <DIO_vTogglePort+0x2e>
 50e:	82 36       	cpi	r24, 0x62	; 98
 510:	71 f0       	breq	.+28     	; 0x52e <DIO_vTogglePort+0x36>
 512:	83 36       	cpi	r24, 0x63	; 99
 514:	18 f4       	brcc	.+6      	; 0x51c <DIO_vTogglePort+0x24>
 516:	81 36       	cpi	r24, 0x61	; 97
 518:	a9 f4       	brne	.+42     	; 0x544 <DIO_vTogglePort+0x4c>
 51a:	05 c0       	rjmp	.+10     	; 0x526 <DIO_vTogglePort+0x2e>
 51c:	83 36       	cpi	r24, 0x63	; 99
 51e:	59 f0       	breq	.+22     	; 0x536 <DIO_vTogglePort+0x3e>
 520:	84 36       	cpi	r24, 0x64	; 100
 522:	81 f4       	brne	.+32     	; 0x544 <DIO_vTogglePort+0x4c>
 524:	0c c0       	rjmp	.+24     	; 0x53e <DIO_vTogglePort+0x46>
	{
		case 'A':
		case 'a':
			PORTA = ~PORTA;
 526:	8b b3       	in	r24, 0x1b	; 27
 528:	80 95       	com	r24
 52a:	8b bb       	out	0x1b, r24	; 27
			break;
 52c:	08 95       	ret
		case 'B':
		case 'b':
			PORTB = ~PORTB;
 52e:	88 b3       	in	r24, 0x18	; 24
 530:	80 95       	com	r24
 532:	88 bb       	out	0x18, r24	; 24
			break;
 534:	08 95       	ret
		case 'C':
		case 'c':
			PORTC = ~PORTC;
 536:	85 b3       	in	r24, 0x15	; 21
 538:	80 95       	com	r24
 53a:	85 bb       	out	0x15, r24	; 21
			break;
 53c:	08 95       	ret
		case 'D':
		case 'd':
			PORTD = ~PORTD;
 53e:	82 b3       	in	r24, 0x12	; 18
 540:	80 95       	com	r24
 542:	82 bb       	out	0x12, r24	; 18
 544:	08 95       	ret

00000546 <DIO_vConnectInternalPullUp>:
	}
}

void DIO_vConnectInternalPullUp(unsigned char portname, unsigned char pinnumber, unsigned char enable)
{
	switch(portname)
 546:	84 34       	cpi	r24, 0x44	; 68
 548:	09 f4       	brne	.+2      	; 0x54c <DIO_vConnectInternalPullUp+0x6>
 54a:	71 c0       	rjmp	.+226    	; 0x62e <DIO_vConnectInternalPullUp+0xe8>
 54c:	85 34       	cpi	r24, 0x45	; 69
 54e:	48 f4       	brcc	.+18     	; 0x562 <DIO_vConnectInternalPullUp+0x1c>
 550:	82 34       	cpi	r24, 0x42	; 66
 552:	99 f1       	breq	.+102    	; 0x5ba <DIO_vConnectInternalPullUp+0x74>
 554:	83 34       	cpi	r24, 0x43	; 67
 556:	08 f0       	brcs	.+2      	; 0x55a <DIO_vConnectInternalPullUp+0x14>
 558:	4d c0       	rjmp	.+154    	; 0x5f4 <DIO_vConnectInternalPullUp+0xae>
 55a:	81 34       	cpi	r24, 0x41	; 65
 55c:	09 f0       	breq	.+2      	; 0x560 <DIO_vConnectInternalPullUp+0x1a>
 55e:	83 c0       	rjmp	.+262    	; 0x666 <DIO_vConnectInternalPullUp+0x120>
 560:	0f c0       	rjmp	.+30     	; 0x580 <DIO_vConnectInternalPullUp+0x3a>
 562:	82 36       	cpi	r24, 0x62	; 98
 564:	51 f1       	breq	.+84     	; 0x5ba <DIO_vConnectInternalPullUp+0x74>
 566:	83 36       	cpi	r24, 0x63	; 99
 568:	20 f4       	brcc	.+8      	; 0x572 <DIO_vConnectInternalPullUp+0x2c>
 56a:	81 36       	cpi	r24, 0x61	; 97
 56c:	09 f0       	breq	.+2      	; 0x570 <DIO_vConnectInternalPullUp+0x2a>
 56e:	7b c0       	rjmp	.+246    	; 0x666 <DIO_vConnectInternalPullUp+0x120>
 570:	07 c0       	rjmp	.+14     	; 0x580 <DIO_vConnectInternalPullUp+0x3a>
 572:	83 36       	cpi	r24, 0x63	; 99
 574:	09 f4       	brne	.+2      	; 0x578 <DIO_vConnectInternalPullUp+0x32>
 576:	3e c0       	rjmp	.+124    	; 0x5f4 <DIO_vConnectInternalPullUp+0xae>
 578:	84 36       	cpi	r24, 0x64	; 100
 57a:	09 f0       	breq	.+2      	; 0x57e <DIO_vConnectInternalPullUp+0x38>
 57c:	74 c0       	rjmp	.+232    	; 0x666 <DIO_vConnectInternalPullUp+0x120>
 57e:	57 c0       	rjmp	.+174    	; 0x62e <DIO_vConnectInternalPullUp+0xe8>
	{
		case 'A':
		case 'a':
			if(enable == 1)
 580:	41 30       	cpi	r20, 0x01	; 1
 582:	69 f4       	brne	.+26     	; 0x59e <DIO_vConnectInternalPullUp+0x58>
			{
				SET_BIT(PORTA, pinnumber);
 584:	2b b3       	in	r18, 0x1b	; 27
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	ac 01       	movw	r20, r24
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_vConnectInternalPullUp+0x4c>
 58e:	44 0f       	add	r20, r20
 590:	55 1f       	adc	r21, r21
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_vConnectInternalPullUp+0x48>
 596:	ba 01       	movw	r22, r20
 598:	62 2b       	or	r22, r18
 59a:	6b bb       	out	0x1b, r22	; 27
 59c:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA, pinnumber);
 59e:	2b b3       	in	r18, 0x1b	; 27
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	ac 01       	movw	r20, r24
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_vConnectInternalPullUp+0x66>
 5a8:	44 0f       	add	r20, r20
 5aa:	55 1f       	adc	r21, r21
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_vConnectInternalPullUp+0x62>
 5b0:	ba 01       	movw	r22, r20
 5b2:	60 95       	com	r22
 5b4:	62 23       	and	r22, r18
 5b6:	6b bb       	out	0x1b, r22	; 27
 5b8:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if(enable == 1)
 5ba:	41 30       	cpi	r20, 0x01	; 1
 5bc:	69 f4       	brne	.+26     	; 0x5d8 <DIO_vConnectInternalPullUp+0x92>
			{
				SET_BIT(PORTB, pinnumber);
 5be:	28 b3       	in	r18, 0x18	; 24
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	ac 01       	movw	r20, r24
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_vConnectInternalPullUp+0x86>
 5c8:	44 0f       	add	r20, r20
 5ca:	55 1f       	adc	r21, r21
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_vConnectInternalPullUp+0x82>
 5d0:	ba 01       	movw	r22, r20
 5d2:	62 2b       	or	r22, r18
 5d4:	68 bb       	out	0x18, r22	; 24
 5d6:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB, pinnumber);
 5d8:	28 b3       	in	r18, 0x18	; 24
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	ac 01       	movw	r20, r24
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_vConnectInternalPullUp+0xa0>
 5e2:	44 0f       	add	r20, r20
 5e4:	55 1f       	adc	r21, r21
 5e6:	6a 95       	dec	r22
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_vConnectInternalPullUp+0x9c>
 5ea:	ba 01       	movw	r22, r20
 5ec:	60 95       	com	r22
 5ee:	62 23       	and	r22, r18
 5f0:	68 bb       	out	0x18, r22	; 24
 5f2:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if(enable == 1)
 5f4:	41 30       	cpi	r20, 0x01	; 1
 5f6:	69 f4       	brne	.+26     	; 0x612 <DIO_vConnectInternalPullUp+0xcc>
			{
				SET_BIT(PORTC, pinnumber);
 5f8:	25 b3       	in	r18, 0x15	; 21
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	ac 01       	movw	r20, r24
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_vConnectInternalPullUp+0xc0>
 602:	44 0f       	add	r20, r20
 604:	55 1f       	adc	r21, r21
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_vConnectInternalPullUp+0xbc>
 60a:	ba 01       	movw	r22, r20
 60c:	62 2b       	or	r22, r18
 60e:	65 bb       	out	0x15, r22	; 21
 610:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC, pinnumber);
 612:	25 b3       	in	r18, 0x15	; 21
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	ac 01       	movw	r20, r24
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_vConnectInternalPullUp+0xda>
 61c:	44 0f       	add	r20, r20
 61e:	55 1f       	adc	r21, r21
 620:	6a 95       	dec	r22
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_vConnectInternalPullUp+0xd6>
 624:	ba 01       	movw	r22, r20
 626:	60 95       	com	r22
 628:	62 23       	and	r22, r18
 62a:	65 bb       	out	0x15, r22	; 21
 62c:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if(enable == 1)
 62e:	41 30       	cpi	r20, 0x01	; 1
 630:	69 f4       	brne	.+26     	; 0x64c <DIO_vConnectInternalPullUp+0x106>
			{
				SET_BIT(PORTD, pinnumber);
 632:	22 b3       	in	r18, 0x12	; 18
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	ac 01       	movw	r20, r24
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_vConnectInternalPullUp+0xfa>
 63c:	44 0f       	add	r20, r20
 63e:	55 1f       	adc	r21, r21
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_vConnectInternalPullUp+0xf6>
 644:	ba 01       	movw	r22, r20
 646:	62 2b       	or	r22, r18
 648:	62 bb       	out	0x12, r22	; 18
 64a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD, pinnumber);
 64c:	22 b3       	in	r18, 0x12	; 18
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	ac 01       	movw	r20, r24
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_vConnectInternalPullUp+0x114>
 656:	44 0f       	add	r20, r20
 658:	55 1f       	adc	r21, r21
 65a:	6a 95       	dec	r22
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_vConnectInternalPullUp+0x110>
 65e:	ba 01       	movw	r22, r20
 660:	60 95       	com	r22
 662:	62 23       	and	r22, r18
 664:	62 bb       	out	0x12, r22	; 18
 666:	08 95       	ret

00000668 <DIO_vWriteLowNibble>:
	
}

void DIO_vWriteLowNibble(unsigned char portname, unsigned char nibblevalue)
{
	nibblevalue &= 0x0F;
 668:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 66a:	84 34       	cpi	r24, 0x44	; 68
 66c:	51 f1       	breq	.+84     	; 0x6c2 <DIO_vWriteLowNibble+0x5a>
 66e:	85 34       	cpi	r24, 0x45	; 69
 670:	38 f4       	brcc	.+14     	; 0x680 <DIO_vWriteLowNibble+0x18>
 672:	82 34       	cpi	r24, 0x42	; 66
 674:	c1 f0       	breq	.+48     	; 0x6a6 <DIO_vWriteLowNibble+0x3e>
 676:	83 34       	cpi	r24, 0x43	; 67
 678:	e8 f4       	brcc	.+58     	; 0x6b4 <DIO_vWriteLowNibble+0x4c>
 67a:	81 34       	cpi	r24, 0x41	; 65
 67c:	41 f5       	brne	.+80     	; 0x6ce <DIO_vWriteLowNibble+0x66>
 67e:	0c c0       	rjmp	.+24     	; 0x698 <DIO_vWriteLowNibble+0x30>
 680:	82 36       	cpi	r24, 0x62	; 98
 682:	89 f0       	breq	.+34     	; 0x6a6 <DIO_vWriteLowNibble+0x3e>
 684:	83 36       	cpi	r24, 0x63	; 99
 686:	18 f4       	brcc	.+6      	; 0x68e <DIO_vWriteLowNibble+0x26>
 688:	81 36       	cpi	r24, 0x61	; 97
 68a:	09 f5       	brne	.+66     	; 0x6ce <DIO_vWriteLowNibble+0x66>
 68c:	05 c0       	rjmp	.+10     	; 0x698 <DIO_vWriteLowNibble+0x30>
 68e:	83 36       	cpi	r24, 0x63	; 99
 690:	89 f0       	breq	.+34     	; 0x6b4 <DIO_vWriteLowNibble+0x4c>
 692:	84 36       	cpi	r24, 0x64	; 100
 694:	e1 f4       	brne	.+56     	; 0x6ce <DIO_vWriteLowNibble+0x66>
 696:	15 c0       	rjmp	.+42     	; 0x6c2 <DIO_vWriteLowNibble+0x5a>
	{
		case 'A':
		case 'a':
			PORTA &= 0xF0;
 698:	8b b3       	in	r24, 0x1b	; 27
 69a:	80 7f       	andi	r24, 0xF0	; 240
 69c:	8b bb       	out	0x1b, r24	; 27
			PORTA |= nibblevalue;
 69e:	8b b3       	in	r24, 0x1b	; 27
 6a0:	68 2b       	or	r22, r24
 6a2:	6b bb       	out	0x1b, r22	; 27
			break;
 6a4:	08 95       	ret
		case 'B':
		case 'b':
			PORTB &= 0xF0;
 6a6:	88 b3       	in	r24, 0x18	; 24
 6a8:	80 7f       	andi	r24, 0xF0	; 240
 6aa:	88 bb       	out	0x18, r24	; 24
			PORTB |= nibblevalue;
 6ac:	88 b3       	in	r24, 0x18	; 24
 6ae:	68 2b       	or	r22, r24
 6b0:	68 bb       	out	0x18, r22	; 24
			break;
 6b2:	08 95       	ret
		case 'C':
		case 'c':
			PORTC &= 0xF0;
 6b4:	85 b3       	in	r24, 0x15	; 21
 6b6:	80 7f       	andi	r24, 0xF0	; 240
 6b8:	85 bb       	out	0x15, r24	; 21
			PORTC |= nibblevalue;
 6ba:	85 b3       	in	r24, 0x15	; 21
 6bc:	68 2b       	or	r22, r24
 6be:	65 bb       	out	0x15, r22	; 21
			break;
 6c0:	08 95       	ret
		case 'D':
		case 'd':
			PORTD &= 0xF0;
 6c2:	82 b3       	in	r24, 0x12	; 18
 6c4:	80 7f       	andi	r24, 0xF0	; 240
 6c6:	82 bb       	out	0x12, r24	; 18
			PORTD |= nibblevalue;
 6c8:	82 b3       	in	r24, 0x12	; 18
 6ca:	68 2b       	or	r22, r24
 6cc:	62 bb       	out	0x12, r22	; 18
 6ce:	08 95       	ret

000006d0 <DIO_vWriteHighNibble>:
	}
}

void DIO_vWriteHighNibble(unsigned char portname, unsigned char nibblevalue)
{
	nibblevalue <<= 4;
 6d0:	62 95       	swap	r22
 6d2:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 6d4:	84 34       	cpi	r24, 0x44	; 68
 6d6:	51 f1       	breq	.+84     	; 0x72c <DIO_vWriteHighNibble+0x5c>
 6d8:	85 34       	cpi	r24, 0x45	; 69
 6da:	38 f4       	brcc	.+14     	; 0x6ea <DIO_vWriteHighNibble+0x1a>
 6dc:	82 34       	cpi	r24, 0x42	; 66
 6de:	c1 f0       	breq	.+48     	; 0x710 <DIO_vWriteHighNibble+0x40>
 6e0:	83 34       	cpi	r24, 0x43	; 67
 6e2:	e8 f4       	brcc	.+58     	; 0x71e <DIO_vWriteHighNibble+0x4e>
 6e4:	81 34       	cpi	r24, 0x41	; 65
 6e6:	41 f5       	brne	.+80     	; 0x738 <DIO_vWriteHighNibble+0x68>
 6e8:	0c c0       	rjmp	.+24     	; 0x702 <DIO_vWriteHighNibble+0x32>
 6ea:	82 36       	cpi	r24, 0x62	; 98
 6ec:	89 f0       	breq	.+34     	; 0x710 <DIO_vWriteHighNibble+0x40>
 6ee:	83 36       	cpi	r24, 0x63	; 99
 6f0:	18 f4       	brcc	.+6      	; 0x6f8 <DIO_vWriteHighNibble+0x28>
 6f2:	81 36       	cpi	r24, 0x61	; 97
 6f4:	09 f5       	brne	.+66     	; 0x738 <DIO_vWriteHighNibble+0x68>
 6f6:	05 c0       	rjmp	.+10     	; 0x702 <DIO_vWriteHighNibble+0x32>
 6f8:	83 36       	cpi	r24, 0x63	; 99
 6fa:	89 f0       	breq	.+34     	; 0x71e <DIO_vWriteHighNibble+0x4e>
 6fc:	84 36       	cpi	r24, 0x64	; 100
 6fe:	e1 f4       	brne	.+56     	; 0x738 <DIO_vWriteHighNibble+0x68>
 700:	15 c0       	rjmp	.+42     	; 0x72c <DIO_vWriteHighNibble+0x5c>
	{
		case 'A':
		case 'a':
		PORTA &= 0x0F;
 702:	8b b3       	in	r24, 0x1b	; 27
 704:	8f 70       	andi	r24, 0x0F	; 15
 706:	8b bb       	out	0x1b, r24	; 27
		PORTA |= nibblevalue;
 708:	8b b3       	in	r24, 0x1b	; 27
 70a:	68 2b       	or	r22, r24
 70c:	6b bb       	out	0x1b, r22	; 27
		break;
 70e:	08 95       	ret
		case 'B':
		case 'b':
		PORTB &= 0x0F;
 710:	88 b3       	in	r24, 0x18	; 24
 712:	8f 70       	andi	r24, 0x0F	; 15
 714:	88 bb       	out	0x18, r24	; 24
		PORTB |= nibblevalue;
 716:	88 b3       	in	r24, 0x18	; 24
 718:	68 2b       	or	r22, r24
 71a:	68 bb       	out	0x18, r22	; 24
		break;
 71c:	08 95       	ret
		case 'C':
		case 'c':
		PORTC &= 0x0F;
 71e:	85 b3       	in	r24, 0x15	; 21
 720:	8f 70       	andi	r24, 0x0F	; 15
 722:	85 bb       	out	0x15, r24	; 21
		PORTC |= nibblevalue;
 724:	85 b3       	in	r24, 0x15	; 21
 726:	68 2b       	or	r22, r24
 728:	65 bb       	out	0x15, r22	; 21
		break;
 72a:	08 95       	ret
		case 'D':
		case 'd':
		PORTD &= 0x0F;
 72c:	82 b3       	in	r24, 0x12	; 18
 72e:	8f 70       	andi	r24, 0x0F	; 15
 730:	82 bb       	out	0x12, r24	; 18
		PORTD |= nibblevalue;
 732:	82 b3       	in	r24, 0x12	; 18
 734:	68 2b       	or	r22, r24
 736:	62 bb       	out	0x12, r22	; 18
 738:	08 95       	ret

0000073a <LCD_vSendPulse>:
	#endif
}

static void LCD_vSendPulse(void)
{
	DIO_vWritePin(CONTROL_PORT, EN, ENABLE);
 73a:	82 e4       	ldi	r24, 0x42	; 66
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	41 e0       	ldi	r20, 0x01	; 1
 740:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 744:	8f e9       	ldi	r24, 0x9F	; 159
 746:	9f e0       	ldi	r25, 0x0F	; 15
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	f1 f7       	brne	.-4      	; 0x748 <LCD_vSendPulse+0xe>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <LCD_vSendPulse+0x14>
 74e:	00 00       	nop
	_delay_ms(2);
	DIO_vWritePin(CONTROL_PORT, EN, DISABLE);
 750:	82 e4       	ldi	r24, 0x42	; 66
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	40 e0       	ldi	r20, 0x00	; 0
 756:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
 75a:	8f e9       	ldi	r24, 0x9F	; 159
 75c:	9f e0       	ldi	r25, 0x0F	; 15
 75e:	01 97       	sbiw	r24, 0x01	; 1
 760:	f1 f7       	brne	.-4      	; 0x75e <LCD_vSendPulse+0x24>
 762:	00 c0       	rjmp	.+0      	; 0x764 <LCD_vSendPulse+0x2a>
 764:	00 00       	nop
	_delay_ms(2);
}
 766:	08 95       	ret

00000768 <LCD_vSendCMD>:

void LCD_vSendCMD(unsigned char cmd)
{
 768:	cf 93       	push	r28
 76a:	c8 2f       	mov	r28, r24
	DIO_vWritePin(CONTROL_PORT, RS, DISABLE);
	DIO_vWritePort(LCD_PORT, cmd);
	LCD_vSendPulse();
	
	#elif defined four_bit_mode
	DIO_vWritePin(CONTROL_PORT, RS, DISABLE);
 76c:	82 e4       	ldi	r24, 0x42	; 66
 76e:	61 e0       	ldi	r22, 0x01	; 1
 770:	40 e0       	ldi	r20, 0x00	; 0
 772:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWriteHighNibble(LCD_PORT, cmd >> 4);
 776:	6c 2f       	mov	r22, r28
 778:	62 95       	swap	r22
 77a:	6f 70       	andi	r22, 0x0F	; 15
 77c:	81 e4       	ldi	r24, 0x41	; 65
 77e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <DIO_vWriteHighNibble>
	LCD_vSendPulse();
 782:	0e 94 9d 03 	call	0x73a	; 0x73a <LCD_vSendPulse>
	DIO_vWriteHighNibble(LCD_PORT, cmd);
 786:	81 e4       	ldi	r24, 0x41	; 65
 788:	6c 2f       	mov	r22, r28
 78a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <DIO_vWriteHighNibble>
	LCD_vSendPulse();
 78e:	0e 94 9d 03 	call	0x73a	; 0x73a <LCD_vSendPulse>
 792:	8f ec       	ldi	r24, 0xCF	; 207
 794:	97 e0       	ldi	r25, 0x07	; 7
 796:	01 97       	sbiw	r24, 0x01	; 1
 798:	f1 f7       	brne	.-4      	; 0x796 <LCD_vSendCMD+0x2e>
 79a:	00 c0       	rjmp	.+0      	; 0x79c <LCD_vSendCMD+0x34>
 79c:	00 00       	nop
	#endif
	_delay_ms(1);
}
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <LCD_vInit>:
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	91 ee       	ldi	r25, 0xE1	; 225
 7a6:	a4 e0       	ldi	r26, 0x04	; 4
 7a8:	81 50       	subi	r24, 0x01	; 1
 7aa:	90 40       	sbci	r25, 0x00	; 0
 7ac:	a0 40       	sbci	r26, 0x00	; 0
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <LCD_vInit+0x6>
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <LCD_vInit+0x10>
 7b2:	00 00       	nop
	_delay_ms(10);
	LCD_vSendCMD(ENTRY_MODE);
	_delay_ms(1);
	
	#elif defined four_bit_mode
	DIO_vsetPinDir(LCD_PORT, PIN4, OUTPUT);
 7b4:	81 e4       	ldi	r24, 0x41	; 65
 7b6:	64 e0       	ldi	r22, 0x04	; 4
 7b8:	41 e0       	ldi	r20, 0x01	; 1
 7ba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir(LCD_PORT, PIN5, OUTPUT);
 7be:	81 e4       	ldi	r24, 0x41	; 65
 7c0:	65 e0       	ldi	r22, 0x05	; 5
 7c2:	41 e0       	ldi	r20, 0x01	; 1
 7c4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir(LCD_PORT, PIN6, OUTPUT);
 7c8:	81 e4       	ldi	r24, 0x41	; 65
 7ca:	66 e0       	ldi	r22, 0x06	; 6
 7cc:	41 e0       	ldi	r20, 0x01	; 1
 7ce:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir(LCD_PORT, PIN7, OUTPUT);
 7d2:	81 e4       	ldi	r24, 0x41	; 65
 7d4:	67 e0       	ldi	r22, 0x07	; 7
 7d6:	41 e0       	ldi	r20, 0x01	; 1
 7d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir(CONTROL_PORT, EN, OUTPUT);
 7dc:	82 e4       	ldi	r24, 0x42	; 66
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir(CONTROL_PORT, RS, OUTPUT);
 7e6:	82 e4       	ldi	r24, 0x42	; 66
 7e8:	61 e0       	ldi	r22, 0x01	; 1
 7ea:	41 e0       	ldi	r20, 0x01	; 1
 7ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir(CONTROL_PORT, RW, OUTPUT);
 7f0:	82 e4       	ldi	r24, 0x42	; 66
 7f2:	62 e0       	ldi	r22, 0x02	; 2
 7f4:	41 e0       	ldi	r20, 0x01	; 1
 7f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vWritePin(CONTROL_PORT, RW, DISABLE);
 7fa:	82 e4       	ldi	r24, 0x42	; 66
 7fc:	62 e0       	ldi	r22, 0x02	; 2
 7fe:	40 e0       	ldi	r20, 0x00	; 0
 800:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	LCD_vSendCMD(RETURN_HOME);
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	0e 94 b4 03 	call	0x768	; 0x768 <LCD_vSendCMD>
 80a:	af e1       	ldi	r26, 0x1F	; 31
 80c:	be e4       	ldi	r27, 0x4E	; 78
 80e:	11 97       	sbiw	r26, 0x01	; 1
 810:	f1 f7       	brne	.-4      	; 0x80e <LCD_vInit+0x6c>
 812:	00 c0       	rjmp	.+0      	; 0x814 <LCD_vInit+0x72>
 814:	00 00       	nop
	_delay_ms(10);
	LCD_vSendCMD(FOUR_BITS);
 816:	88 e2       	ldi	r24, 0x28	; 40
 818:	0e 94 b4 03 	call	0x768	; 0x768 <LCD_vSendCMD>
 81c:	8f ec       	ldi	r24, 0xCF	; 207
 81e:	97 e0       	ldi	r25, 0x07	; 7
 820:	01 97       	sbiw	r24, 0x01	; 1
 822:	f1 f7       	brne	.-4      	; 0x820 <LCD_vInit+0x7e>
 824:	00 c0       	rjmp	.+0      	; 0x826 <LCD_vInit+0x84>
 826:	00 00       	nop
	_delay_ms(1);
	LCD_vSendCMD(DISPLAY_ON_CURSOR_ON);
 828:	8c e0       	ldi	r24, 0x0C	; 12
 82a:	0e 94 b4 03 	call	0x768	; 0x768 <LCD_vSendCMD>
 82e:	af ec       	ldi	r26, 0xCF	; 207
 830:	b7 e0       	ldi	r27, 0x07	; 7
 832:	11 97       	sbiw	r26, 0x01	; 1
 834:	f1 f7       	brne	.-4      	; 0x832 <LCD_vInit+0x90>
 836:	00 c0       	rjmp	.+0      	; 0x838 <LCD_vInit+0x96>
 838:	00 00       	nop
	_delay_ms(1);
	LCD_vSendCMD(CLR_SCREEN);
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	0e 94 b4 03 	call	0x768	; 0x768 <LCD_vSendCMD>
 840:	8f e1       	ldi	r24, 0x1F	; 31
 842:	9e e4       	ldi	r25, 0x4E	; 78
 844:	01 97       	sbiw	r24, 0x01	; 1
 846:	f1 f7       	brne	.-4      	; 0x844 <LCD_vInit+0xa2>
 848:	00 c0       	rjmp	.+0      	; 0x84a <LCD_vInit+0xa8>
 84a:	00 00       	nop
	_delay_ms(10);
	LCD_vSendCMD(ENTRY_MODE);
 84c:	86 e0       	ldi	r24, 0x06	; 6
 84e:	0e 94 b4 03 	call	0x768	; 0x768 <LCD_vSendCMD>
 852:	af ec       	ldi	r26, 0xCF	; 207
 854:	b7 e0       	ldi	r27, 0x07	; 7
 856:	11 97       	sbiw	r26, 0x01	; 1
 858:	f1 f7       	brne	.-4      	; 0x856 <LCD_vInit+0xb4>
 85a:	00 c0       	rjmp	.+0      	; 0x85c <LCD_vInit+0xba>
 85c:	00 00       	nop
	_delay_ms(1);
	#endif
}
 85e:	08 95       	ret

00000860 <LCD_vSendChar>:
	#endif
	_delay_ms(1);
}

LCD_vSendChar(unsigned char data)
{
 860:	cf 93       	push	r28
 862:	c8 2f       	mov	r28, r24
	DIO_vWritePin(CONTROL_PORT, RS, ENABLE);
	DIO_vWritePort(LCD_PORT, data);
	LCD_vSendPulse();
	
	#elif defined four_bit_mode
	DIO_vWritePin(CONTROL_PORT, RS, ENABLE);
 864:	82 e4       	ldi	r24, 0x42	; 66
 866:	61 e0       	ldi	r22, 0x01	; 1
 868:	41 e0       	ldi	r20, 0x01	; 1
 86a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWriteHighNibble(LCD_PORT, data >> 4);
 86e:	6c 2f       	mov	r22, r28
 870:	62 95       	swap	r22
 872:	6f 70       	andi	r22, 0x0F	; 15
 874:	81 e4       	ldi	r24, 0x41	; 65
 876:	0e 94 68 03 	call	0x6d0	; 0x6d0 <DIO_vWriteHighNibble>
	LCD_vSendPulse();
 87a:	0e 94 9d 03 	call	0x73a	; 0x73a <LCD_vSendPulse>
	DIO_vWriteHighNibble(LCD_PORT, data);
 87e:	81 e4       	ldi	r24, 0x41	; 65
 880:	6c 2f       	mov	r22, r28
 882:	0e 94 68 03 	call	0x6d0	; 0x6d0 <DIO_vWriteHighNibble>
	LCD_vSendPulse();
 886:	0e 94 9d 03 	call	0x73a	; 0x73a <LCD_vSendPulse>
	#endif
}
 88a:	cf 91       	pop	r28
 88c:	08 95       	ret

0000088e <LCD_vSendString>:

void LCD_vSendString(unsigned char *data)
{
 88e:	cf 93       	push	r28
 890:	df 93       	push	r29
 892:	ec 01       	movw	r28, r24
	while((*data) != 0)
 894:	88 81       	ld	r24, Y
 896:	88 23       	and	r24, r24
 898:	31 f0       	breq	.+12     	; 0x8a6 <LCD_vSendString+0x18>
	DIO_vWriteHighNibble(LCD_PORT, data);
	LCD_vSendPulse();
	#endif
}

void LCD_vSendString(unsigned char *data)
 89a:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data) != 0)
	{
		LCD_vSendChar(*data);
 89c:	0e 94 30 04 	call	0x860	; 0x860 <LCD_vSendChar>
	#endif
}

void LCD_vSendString(unsigned char *data)
{
	while((*data) != 0)
 8a0:	89 91       	ld	r24, Y+
 8a2:	88 23       	and	r24, r24
 8a4:	d9 f7       	brne	.-10     	; 0x89c <LCD_vSendString+0xe>
	{
		LCD_vSendChar(*data);
		data++;
	}
}
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	08 95       	ret

000008ac <LCD_vClearScreen>:

void LCD_vClearScreen()
{
	LCD_vSendCMD(CLR_SCREEN);
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	0e 94 b4 03 	call	0x768	; 0x768 <LCD_vSendCMD>
 8b2:	8f e1       	ldi	r24, 0x1F	; 31
 8b4:	9e e4       	ldi	r25, 0x4E	; 78
 8b6:	01 97       	sbiw	r24, 0x01	; 1
 8b8:	f1 f7       	brne	.-4      	; 0x8b6 <LCD_vClearScreen+0xa>
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <LCD_vClearScreen+0x10>
 8bc:	00 00       	nop
	_delay_ms(10);
}
 8be:	08 95       	ret

000008c0 <LCD_vMoveCursor>:

void LCD_vMoveCursor(char row, char column)
{
	unsigned char data;
	if(row < 1 || row > 2 || column > 20 || column < 1)
 8c0:	98 2f       	mov	r25, r24
 8c2:	91 50       	subi	r25, 0x01	; 1
 8c4:	92 30       	cpi	r25, 0x02	; 2
 8c6:	68 f4       	brcc	.+26     	; 0x8e2 <LCD_vMoveCursor+0x22>
 8c8:	65 31       	cpi	r22, 0x15	; 21
 8ca:	58 f4       	brcc	.+22     	; 0x8e2 <LCD_vMoveCursor+0x22>
 8cc:	66 23       	and	r22, r22
 8ce:	49 f0       	breq	.+18     	; 0x8e2 <LCD_vMoveCursor+0x22>
	{
		data = 0x80;
	}
	else
	{
		if(row == 1)
 8d0:	81 30       	cpi	r24, 0x01	; 1
 8d2:	19 f4       	brne	.+6      	; 0x8da <LCD_vMoveCursor+0x1a>
		{
			data = 0x80 + column - 1;
 8d4:	86 2f       	mov	r24, r22
 8d6:	81 58       	subi	r24, 0x81	; 129
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <LCD_vMoveCursor+0x1e>
		}
		else
		{
			data = 0xC0 + column - 1;
 8da:	86 2f       	mov	r24, r22
 8dc:	81 54       	subi	r24, 0x41	; 65
		}
		LCD_vSendCMD(data);
 8de:	0e 94 b4 03 	call	0x768	; 0x768 <LCD_vSendCMD>
 8e2:	08 95       	ret

000008e4 <LCD_vSetCGRAMAddress>:
	}
}

void LCD_vSetCGRAMAddress(unsigned char address)
{
	if(address > 0x3F)
 8e4:	80 34       	cpi	r24, 0x40	; 64
 8e6:	20 f0       	brcs	.+8      	; 0x8f0 <LCD_vSetCGRAMAddress+0xc>
	{
		address = 0x80;
		LCD_vSendCMD(address);
 8e8:	80 e8       	ldi	r24, 0x80	; 128
 8ea:	0e 94 b4 03 	call	0x768	; 0x768 <LCD_vSendCMD>
 8ee:	08 95       	ret
	}
	else
	{
		SET_BIT(address, 6);
 8f0:	80 64       	ori	r24, 0x40	; 64
		CLR_BIT(address, 7);
		LCD_vSendCMD(address);
 8f2:	8f 77       	andi	r24, 0x7F	; 127
 8f4:	0e 94 b4 03 	call	0x768	; 0x768 <LCD_vSendCMD>
 8f8:	08 95       	ret

000008fa <LED_vInit>:
#include "DIO.h"

void LED_vInit(unsigned char portname, unsigned char pinnumber)
{
	DIO_vsetPinDir(portname, pinnumber, 1);
 8fa:	41 e0       	ldi	r20, 0x01	; 1
 8fc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
}
 900:	08 95       	ret

00000902 <LED_vInitPort>:

void LED_vInitPort(unsigned char portname)
{
	DIO_vSetPortDirection(portname, 0xFF);
 902:	6f ef       	ldi	r22, 0xFF	; 255
 904:	0e 94 1d 02 	call	0x43a	; 0x43a <DIO_vSetPortDirection>
}
 908:	08 95       	ret

0000090a <LED_vTurnOn>:

void LED_vTurnOn(unsigned char portname, unsigned char pinnumber)
{
	DIO_vWritePin(portname, pinnumber, 1);
 90a:	41 e0       	ldi	r20, 0x01	; 1
 90c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
}
 910:	08 95       	ret

00000912 <LED_vTurnOff>:

void LED_vTurnOff(unsigned char portname, unsigned char pinnumber)
{
	DIO_vWritePin(portname, pinnumber, 0);
 912:	40 e0       	ldi	r20, 0x00	; 0
 914:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
}
 918:	08 95       	ret

0000091a <LED_vToggle>:

void LED_vToggle(unsigned char portname, unsigned char pinnumber)
{
	DIO_vTogglePin(portname, pinnumber);
 91a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_vTogglePin>
}
 91e:	08 95       	ret

00000920 <LED_u8ReadStatus>:

unsigned char LED_u8ReadStatus(unsigned char portname, unsigned char pinnumber)
{
	unsigned char return_value = 0;
	return_value = DIO_u8ReadPin(portname, pinnumber);
 920:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_u8ReadPin>
	return return_value;
 924:	08 95       	ret

00000926 <TIMER_TWO_vInitNormalMode>:
#define EXTERNAL_CLK


void TIMER_TWO_vInitNormalMode(unsigned char timer_count, unsigned char interrupt_enable)
{
	if(interrupt_enable == 1)
 926:	61 30       	cpi	r22, 0x01	; 1
 928:	c9 f4       	brne	.+50     	; 0x95c <TIMER_TWO_vInitNormalMode+0x36>
	{
		//Select Timer Clock Source
		#if defined EXTERNAL_CLK
		SET_BIT(ASSR, AS2);
 92a:	92 b5       	in	r25, 0x22	; 34
 92c:	98 60       	ori	r25, 0x08	; 8
 92e:	92 bd       	out	0x22, r25	; 34
		#elif defined INTERNAL_CLK
		CLR_BIT(ASSR, AS2);
		#endif
		//Init timer2 with prescaler 128
		SET_BIT(TCCR2, CS20);
 930:	95 b5       	in	r25, 0x25	; 37
 932:	91 60       	ori	r25, 0x01	; 1
 934:	95 bd       	out	0x25, r25	; 37
		CLR_BIT(TCCR2, CS21);
 936:	95 b5       	in	r25, 0x25	; 37
 938:	9d 7f       	andi	r25, 0xFD	; 253
 93a:	95 bd       	out	0x25, r25	; 37
		SET_BIT(TCCR2, CS22);
 93c:	95 b5       	in	r25, 0x25	; 37
 93e:	94 60       	ori	r25, 0x04	; 4
 940:	95 bd       	out	0x25, r25	; 37
		//Set Normal Mode
		CLR_BIT(TCCR2, WGM20);
 942:	95 b5       	in	r25, 0x25	; 37
 944:	9f 7b       	andi	r25, 0xBF	; 191
 946:	95 bd       	out	0x25, r25	; 37
		CLR_BIT(TCCR2, WGM21);
 948:	95 b5       	in	r25, 0x25	; 37
 94a:	97 7f       	andi	r25, 0xF7	; 247
 94c:	95 bd       	out	0x25, r25	; 37
		//Init TCNT2 with timer_count
		TCNT2 = 256 - timer_count;
 94e:	81 95       	neg	r24
 950:	84 bd       	out	0x24, r24	; 36
		//Set Global Interrupt bit
		sei();
 952:	78 94       	sei
		//Enable Overflow Interrupt Mode
		SET_BIT(TIMSK, TOIE2);
 954:	89 b7       	in	r24, 0x39	; 57
 956:	80 64       	ori	r24, 0x40	; 64
 958:	89 bf       	out	0x39, r24	; 57
 95a:	08 95       	ret
	}
	else
	{
		//Select Timer Clock Source
		#if defined EXTERNAL_CLK
		SET_BIT(ASSR, AS2);
 95c:	92 b5       	in	r25, 0x22	; 34
 95e:	98 60       	ori	r25, 0x08	; 8
 960:	92 bd       	out	0x22, r25	; 34
		#elif defined INTERNAL_CLK
		CLR_BIT(ASSR, AS2);
		#endif
		//Init timer2 with prescaler 128
		SET_BIT(TCCR2, CS20);
 962:	95 b5       	in	r25, 0x25	; 37
 964:	91 60       	ori	r25, 0x01	; 1
 966:	95 bd       	out	0x25, r25	; 37
		CLR_BIT(TCCR2, CS21);
 968:	95 b5       	in	r25, 0x25	; 37
 96a:	9d 7f       	andi	r25, 0xFD	; 253
 96c:	95 bd       	out	0x25, r25	; 37
		SET_BIT(TCCR2, CS22);
 96e:	95 b5       	in	r25, 0x25	; 37
 970:	94 60       	ori	r25, 0x04	; 4
 972:	95 bd       	out	0x25, r25	; 37
		//Set Normal Mode
		CLR_BIT(TCCR2, WGM20);
 974:	95 b5       	in	r25, 0x25	; 37
 976:	9f 7b       	andi	r25, 0xBF	; 191
 978:	95 bd       	out	0x25, r25	; 37
		CLR_BIT(TCCR2, WGM21);
 97a:	95 b5       	in	r25, 0x25	; 37
 97c:	97 7f       	andi	r25, 0xF7	; 247
 97e:	95 bd       	out	0x25, r25	; 37
		//Init TCNT2 with timer_count
		TCNT2 = 256 - timer_count;
 980:	81 95       	neg	r24
 982:	84 bd       	out	0x24, r24	; 36
 984:	08 95       	ret

00000986 <TIMER_TWO_vInitCTCMode>:
}


void TIMER_TWO_vInitCTCMode(unsigned char timer_count, unsigned char interrupt_enable)
{
	if(interrupt_enable == 1)
 986:	61 30       	cpi	r22, 0x01	; 1
 988:	c9 f4       	brne	.+50     	; 0x9bc <TIMER_TWO_vInitCTCMode+0x36>
	{
		//Select Timer Clock Source
		#if defined EXTERNAL_CLK
		SET_BIT(ASSR, AS2);
 98a:	92 b5       	in	r25, 0x22	; 34
 98c:	98 60       	ori	r25, 0x08	; 8
 98e:	92 bd       	out	0x22, r25	; 34
		#elif defined INTERNAL_CLK
		CLR_BIT(ASSR, AS2);
		#endif
		//Init timer2 with prescaler 1024
		SET_BIT(TCCR2, CS20);
 990:	95 b5       	in	r25, 0x25	; 37
 992:	91 60       	ori	r25, 0x01	; 1
 994:	95 bd       	out	0x25, r25	; 37
		SET_BIT(TCCR2, CS21);
 996:	95 b5       	in	r25, 0x25	; 37
 998:	92 60       	ori	r25, 0x02	; 2
 99a:	95 bd       	out	0x25, r25	; 37
		SET_BIT(TCCR2, CS22);
 99c:	95 b5       	in	r25, 0x25	; 37
 99e:	94 60       	ori	r25, 0x04	; 4
 9a0:	95 bd       	out	0x25, r25	; 37
		//Set CTC Mode
		CLR_BIT(TCCR2, WGM20);
 9a2:	95 b5       	in	r25, 0x25	; 37
 9a4:	9f 7b       	andi	r25, 0xBF	; 191
 9a6:	95 bd       	out	0x25, r25	; 37
		SET_BIT(TCCR2, WGM21);
 9a8:	95 b5       	in	r25, 0x25	; 37
 9aa:	98 60       	ori	r25, 0x08	; 8
 9ac:	95 bd       	out	0x25, r25	; 37
		//Init TCNT2 with 0 value
		TCNT2 = 0;
 9ae:	14 bc       	out	0x24, r1	; 36
		//Init OCR2 with timer_count
		OCR2 = timer_count;
 9b0:	83 bd       	out	0x23, r24	; 35
		//Set Global Interrupt bit
		sei();
 9b2:	78 94       	sei
		//Enable Overflow Interrupt Mode
		SET_BIT(TIMSK, OCIE2);
 9b4:	89 b7       	in	r24, 0x39	; 57
 9b6:	80 68       	ori	r24, 0x80	; 128
 9b8:	89 bf       	out	0x39, r24	; 57
 9ba:	08 95       	ret
	}
	else
	{
		//Select Timer Clock Source
		#if defined EXTERNAL_CLK
		SET_BIT(ASSR, AS2);
 9bc:	92 b5       	in	r25, 0x22	; 34
 9be:	98 60       	ori	r25, 0x08	; 8
 9c0:	92 bd       	out	0x22, r25	; 34
		#elif defined INTERNAL_CLK
		CLR_BIT(ASSR, AS2);
		#endif
		//Init timer2 with prescaler 1024
		SET_BIT(TCCR2, CS20);
 9c2:	95 b5       	in	r25, 0x25	; 37
 9c4:	91 60       	ori	r25, 0x01	; 1
 9c6:	95 bd       	out	0x25, r25	; 37
		SET_BIT(TCCR2, CS21);
 9c8:	95 b5       	in	r25, 0x25	; 37
 9ca:	92 60       	ori	r25, 0x02	; 2
 9cc:	95 bd       	out	0x25, r25	; 37
		SET_BIT(TCCR2, CS22);
 9ce:	95 b5       	in	r25, 0x25	; 37
 9d0:	94 60       	ori	r25, 0x04	; 4
 9d2:	95 bd       	out	0x25, r25	; 37
		//Set CTC Mode
		CLR_BIT(TCCR2, WGM20);
 9d4:	95 b5       	in	r25, 0x25	; 37
 9d6:	9f 7b       	andi	r25, 0xBF	; 191
 9d8:	95 bd       	out	0x25, r25	; 37
		SET_BIT(TCCR2, WGM21);
 9da:	95 b5       	in	r25, 0x25	; 37
 9dc:	98 60       	ori	r25, 0x08	; 8
 9de:	95 bd       	out	0x25, r25	; 37
		//Init TCNT2 with 0 value
		TCNT2 = 0;
 9e0:	14 bc       	out	0x24, r1	; 36
		//Init OCR2 with timer_count
		OCR2 = timer_count;
 9e2:	83 bd       	out	0x23, r24	; 35
 9e4:	08 95       	ret

000009e6 <TIMER_TWO_vGenerateNonPWMSignal>:
}

void TIMER_TWO_vGenerateNonPWMSignal(unsigned char timer_count)
{
	//To Set OC2 as output bit
	SET_BIT(DDRD, PIN7);
 9e6:	8f 9a       	sbi	0x11, 7	; 17
	//Init timer2 with prescaler 1024
	SET_BIT(TCCR2, CS20);
 9e8:	95 b5       	in	r25, 0x25	; 37
 9ea:	91 60       	ori	r25, 0x01	; 1
 9ec:	95 bd       	out	0x25, r25	; 37
	SET_BIT(TCCR2, CS21);
 9ee:	95 b5       	in	r25, 0x25	; 37
 9f0:	92 60       	ori	r25, 0x02	; 2
 9f2:	95 bd       	out	0x25, r25	; 37
	SET_BIT(TCCR2, CS22);
 9f4:	95 b5       	in	r25, 0x25	; 37
 9f6:	94 60       	ori	r25, 0x04	; 4
 9f8:	95 bd       	out	0x25, r25	; 37
	//Set CTC Mode
	CLR_BIT(TCCR2, WGM20);
 9fa:	95 b5       	in	r25, 0x25	; 37
 9fc:	9f 7b       	andi	r25, 0xBF	; 191
 9fe:	95 bd       	out	0x25, r25	; 37
	SET_BIT(TCCR2, WGM21);
 a00:	95 b5       	in	r25, 0x25	; 37
 a02:	98 60       	ori	r25, 0x08	; 8
 a04:	95 bd       	out	0x25, r25	; 37
	//Toggle OC2 On Compare Match
	SET_BIT(TCCR2, COM20);
 a06:	95 b5       	in	r25, 0x25	; 37
 a08:	90 61       	ori	r25, 0x10	; 16
 a0a:	95 bd       	out	0x25, r25	; 37
	CLR_BIT(TCCR2, COM21);
 a0c:	95 b5       	in	r25, 0x25	; 37
 a0e:	9f 7d       	andi	r25, 0xDF	; 223
 a10:	95 bd       	out	0x25, r25	; 37
	//Init TCNT2 with 0 value
	TCNT2 = 0;
 a12:	14 bc       	out	0x24, r1	; 36
	//Init OCR2 with timer_count
	OCR2 = timer_count;
 a14:	83 bd       	out	0x23, r24	; 35
}
 a16:	08 95       	ret

00000a18 <TIMER_TWO_vGenerateFastPWMSignal>:

void TIMER_TWO_vGenerateFastPWMSignal(unsigned char timer_count)
{
	//To Set OC2 as output bit
	SET_BIT(DDRD, PIN7);
 a18:	8f 9a       	sbi	0x11, 7	; 17
	//Init timer2 with prescaler 1024
	SET_BIT(TCCR2, CS20);
 a1a:	95 b5       	in	r25, 0x25	; 37
 a1c:	91 60       	ori	r25, 0x01	; 1
 a1e:	95 bd       	out	0x25, r25	; 37
	SET_BIT(TCCR2, CS21);
 a20:	95 b5       	in	r25, 0x25	; 37
 a22:	92 60       	ori	r25, 0x02	; 2
 a24:	95 bd       	out	0x25, r25	; 37
	SET_BIT(TCCR2, CS22);
 a26:	95 b5       	in	r25, 0x25	; 37
 a28:	94 60       	ori	r25, 0x04	; 4
 a2a:	95 bd       	out	0x25, r25	; 37
	//Set Fast PWM Mode
	SET_BIT(TCCR2, WGM20);
 a2c:	95 b5       	in	r25, 0x25	; 37
 a2e:	90 64       	ori	r25, 0x40	; 64
 a30:	95 bd       	out	0x25, r25	; 37
	SET_BIT(TCCR2, WGM21);
 a32:	95 b5       	in	r25, 0x25	; 37
 a34:	98 60       	ori	r25, 0x08	; 8
 a36:	95 bd       	out	0x25, r25	; 37
	//Non Inverting Mode
	SET_BIT(TCCR2, COM20);
 a38:	95 b5       	in	r25, 0x25	; 37
 a3a:	90 61       	ori	r25, 0x10	; 16
 a3c:	95 bd       	out	0x25, r25	; 37
	SET_BIT(TCCR2, COM21);
 a3e:	95 b5       	in	r25, 0x25	; 37
 a40:	90 62       	ori	r25, 0x20	; 32
 a42:	95 bd       	out	0x25, r25	; 37
	//Init TCNT2 with 0 value
	TCNT2 = 0;
 a44:	14 bc       	out	0x24, r1	; 36
	//Init OCR2 with timer_count
	OCR2 = timer_count;
 a46:	83 bd       	out	0x23, r24	; 35
}
 a48:	08 95       	ret

00000a4a <TIMER_TWO_vGeneratePhaseCorrectPWMSignal>:

void TIMER_TWO_vGeneratePhaseCorrectPWMSignal(unsigned char timer_count)
{
	//To Set OC2 as output bit
	SET_BIT(DDRD, PIN7);
 a4a:	8f 9a       	sbi	0x11, 7	; 17
	//Init timer2 with prescaler 1024
	SET_BIT(TCCR2, CS20);
 a4c:	95 b5       	in	r25, 0x25	; 37
 a4e:	91 60       	ori	r25, 0x01	; 1
 a50:	95 bd       	out	0x25, r25	; 37
	SET_BIT(TCCR2, CS21);
 a52:	95 b5       	in	r25, 0x25	; 37
 a54:	92 60       	ori	r25, 0x02	; 2
 a56:	95 bd       	out	0x25, r25	; 37
	SET_BIT(TCCR2, CS22);
 a58:	95 b5       	in	r25, 0x25	; 37
 a5a:	94 60       	ori	r25, 0x04	; 4
 a5c:	95 bd       	out	0x25, r25	; 37
	//Set Phase-Correct PWM Mode
	SET_BIT(TCCR2, WGM20);
 a5e:	95 b5       	in	r25, 0x25	; 37
 a60:	90 64       	ori	r25, 0x40	; 64
 a62:	95 bd       	out	0x25, r25	; 37
	CLR_BIT(TCCR2, WGM21);
 a64:	95 b5       	in	r25, 0x25	; 37
 a66:	97 7f       	andi	r25, 0xF7	; 247
 a68:	95 bd       	out	0x25, r25	; 37
	//Inverting Mode
	SET_BIT(TCCR2, COM20);
 a6a:	95 b5       	in	r25, 0x25	; 37
 a6c:	90 61       	ori	r25, 0x10	; 16
 a6e:	95 bd       	out	0x25, r25	; 37
	SET_BIT(TCCR2, COM21);
 a70:	95 b5       	in	r25, 0x25	; 37
 a72:	90 62       	ori	r25, 0x20	; 32
 a74:	95 bd       	out	0x25, r25	; 37
	//Init TCNT2 with 0 value
	TCNT2 = 0;
 a76:	14 bc       	out	0x24, r1	; 36
	//Init OCR2 with timer_count
	OCR2 = timer_count;
 a78:	83 bd       	out	0x23, r24	; 35
 a7a:	08 95       	ret

00000a7c <main>:
int main(void)
{
	signed char green_time = 10;
	signed char yellow_time =3;
	signed char red_time = 7;
	LED_vInit(LED_PORT, LED_RED);
 a7c:	84 e4       	ldi	r24, 0x44	; 68
 a7e:	60 e0       	ldi	r22, 0x00	; 0
 a80:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LED_vInit>
	LED_vInit(LED_PORT, LED_YELLOW);
 a84:	84 e4       	ldi	r24, 0x44	; 68
 a86:	61 e0       	ldi	r22, 0x01	; 1
 a88:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LED_vInit>
	LED_vInit(LED_PORT, LED_GREEN);
 a8c:	84 e4       	ldi	r24, 0x44	; 68
 a8e:	62 e0       	ldi	r22, 0x02	; 2
 a90:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LED_vInit>
	LCD_vInit();
 a94:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_vInit>
	TIMER_TWO_vInitNormalMode(256, 1);
 a98:	80 e0       	ldi	r24, 0x00	; 0
 a9a:	61 e0       	ldi	r22, 0x01	; 1
 a9c:	0e 94 93 04 	call	0x926	; 0x926 <TIMER_TWO_vInitNormalMode>
	LCD_vSendString("Remaining Time ");
 aa0:	80 e6       	ldi	r24, 0x60	; 96
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_vSendString>
    while(1)
    {
		LED_vTurnOn(LED_PORT, LED_GREEN);
 aa8:	ca e0       	ldi	r28, 0x0A	; 10
				seconds = 0;
			}
		}			  
		LED_vTurnOff(LED_PORT, LED_GREEN);
		green_time = 10;
		LED_vTurnOn(LED_PORT, LED_YELLOW);
 aaa:	0f 2e       	mov	r0, r31
 aac:	f3 e0       	ldi	r31, 0x03	; 3
 aae:	ff 2e       	mov	r15, r31
 ab0:	f0 2d       	mov	r31, r0
				seconds = 0;
			}
		}
		LED_vTurnOff(LED_PORT, LED_YELLOW);
		yellow_time = 3;
		LED_vTurnOn(LED_PORT, LED_RED);
 ab2:	07 e0       	ldi	r16, 0x07	; 7
	LCD_vInit();
	TIMER_TWO_vInitNormalMode(256, 1);
	LCD_vSendString("Remaining Time ");
    while(1)
    {
		LED_vTurnOn(LED_PORT, LED_GREEN);
 ab4:	84 e4       	ldi	r24, 0x44	; 68
 ab6:	62 e0       	ldi	r22, 0x02	; 2
 ab8:	0e 94 85 04 	call	0x90a	; 0x90a <LED_vTurnOn>
 abc:	1c 2f       	mov	r17, r28
		while(green_time >= 0)
		{
			LCD_vMoveCursor(1, 16);
 abe:	81 e0       	ldi	r24, 0x01	; 1
 ac0:	60 e1       	ldi	r22, 0x10	; 16
 ac2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <LCD_vMoveCursor>
			LCD_vSendChar((green_time / 10) + 48);
 ac6:	81 2f       	mov	r24, r17
 ac8:	6c 2f       	mov	r22, r28
 aca:	0e 94 d2 05 	call	0xba4	; 0xba4 <__divmodqi4>
 ace:	d9 2f       	mov	r29, r25
 ad0:	80 5d       	subi	r24, 0xD0	; 208
 ad2:	0e 94 30 04 	call	0x860	; 0x860 <LCD_vSendChar>
			LCD_vSendChar((green_time % 10) + 48);
 ad6:	8d 2f       	mov	r24, r29
 ad8:	80 5d       	subi	r24, 0xD0	; 208
 ada:	0e 94 30 04 	call	0x860	; 0x860 <LCD_vSendChar>
			if(seconds >= 1)
 ade:	80 91 70 00 	lds	r24, 0x0070
 ae2:	88 23       	and	r24, r24
 ae4:	61 f3       	breq	.-40     	; 0xabe <main+0x42>
			{
				green_time--;
 ae6:	11 50       	subi	r17, 0x01	; 1
				seconds = 0;
 ae8:	10 92 70 00 	sts	0x0070, r1
	TIMER_TWO_vInitNormalMode(256, 1);
	LCD_vSendString("Remaining Time ");
    while(1)
    {
		LED_vTurnOn(LED_PORT, LED_GREEN);
		while(green_time >= 0)
 aec:	11 23       	and	r17, r17
 aee:	3c f7       	brge	.-50     	; 0xabe <main+0x42>
			{
				green_time--;
				seconds = 0;
			}
		}			  
		LED_vTurnOff(LED_PORT, LED_GREEN);
 af0:	84 e4       	ldi	r24, 0x44	; 68
 af2:	62 e0       	ldi	r22, 0x02	; 2
 af4:	0e 94 89 04 	call	0x912	; 0x912 <LED_vTurnOff>
		green_time = 10;
		LED_vTurnOn(LED_PORT, LED_YELLOW);
 af8:	84 e4       	ldi	r24, 0x44	; 68
 afa:	61 e0       	ldi	r22, 0x01	; 1
 afc:	0e 94 85 04 	call	0x90a	; 0x90a <LED_vTurnOn>
 b00:	1f 2d       	mov	r17, r15
		while(yellow_time >= 0)
		{
			LCD_vMoveCursor(1, 16);
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	60 e1       	ldi	r22, 0x10	; 16
 b06:	0e 94 60 04 	call	0x8c0	; 0x8c0 <LCD_vMoveCursor>
			LCD_vSendChar((yellow_time / 10) + 48);
 b0a:	81 2f       	mov	r24, r17
 b0c:	6c 2f       	mov	r22, r28
 b0e:	0e 94 d2 05 	call	0xba4	; 0xba4 <__divmodqi4>
 b12:	d9 2f       	mov	r29, r25
 b14:	80 5d       	subi	r24, 0xD0	; 208
 b16:	0e 94 30 04 	call	0x860	; 0x860 <LCD_vSendChar>
			LCD_vSendChar((yellow_time % 10) + 48);
 b1a:	8d 2f       	mov	r24, r29
 b1c:	80 5d       	subi	r24, 0xD0	; 208
 b1e:	0e 94 30 04 	call	0x860	; 0x860 <LCD_vSendChar>
			if(seconds >= 1)
 b22:	80 91 70 00 	lds	r24, 0x0070
 b26:	88 23       	and	r24, r24
 b28:	61 f3       	breq	.-40     	; 0xb02 <main+0x86>
			{
				yellow_time--;
 b2a:	11 50       	subi	r17, 0x01	; 1
				seconds = 0;
 b2c:	10 92 70 00 	sts	0x0070, r1
			}
		}			  
		LED_vTurnOff(LED_PORT, LED_GREEN);
		green_time = 10;
		LED_vTurnOn(LED_PORT, LED_YELLOW);
		while(yellow_time >= 0)
 b30:	11 23       	and	r17, r17
 b32:	3c f7       	brge	.-50     	; 0xb02 <main+0x86>
			{
				yellow_time--;
				seconds = 0;
			}
		}
		LED_vTurnOff(LED_PORT, LED_YELLOW);
 b34:	84 e4       	ldi	r24, 0x44	; 68
 b36:	61 e0       	ldi	r22, 0x01	; 1
 b38:	0e 94 89 04 	call	0x912	; 0x912 <LED_vTurnOff>
		yellow_time = 3;
		LED_vTurnOn(LED_PORT, LED_RED);
 b3c:	84 e4       	ldi	r24, 0x44	; 68
 b3e:	60 e0       	ldi	r22, 0x00	; 0
 b40:	0e 94 85 04 	call	0x90a	; 0x90a <LED_vTurnOn>
 b44:	10 2f       	mov	r17, r16
		while(red_time >= 0)
		{
			LCD_vMoveCursor(1, 16);
 b46:	81 e0       	ldi	r24, 0x01	; 1
 b48:	60 e1       	ldi	r22, 0x10	; 16
 b4a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <LCD_vMoveCursor>
			LCD_vSendChar((red_time / 10) + 48);
 b4e:	81 2f       	mov	r24, r17
 b50:	6c 2f       	mov	r22, r28
 b52:	0e 94 d2 05 	call	0xba4	; 0xba4 <__divmodqi4>
 b56:	d9 2f       	mov	r29, r25
 b58:	80 5d       	subi	r24, 0xD0	; 208
 b5a:	0e 94 30 04 	call	0x860	; 0x860 <LCD_vSendChar>
			LCD_vSendChar((red_time % 10) + 48);
 b5e:	8d 2f       	mov	r24, r29
 b60:	80 5d       	subi	r24, 0xD0	; 208
 b62:	0e 94 30 04 	call	0x860	; 0x860 <LCD_vSendChar>
			if(seconds >= 1)
 b66:	80 91 70 00 	lds	r24, 0x0070
 b6a:	88 23       	and	r24, r24
 b6c:	61 f3       	breq	.-40     	; 0xb46 <main+0xca>
			{
				red_time--;
 b6e:	11 50       	subi	r17, 0x01	; 1
				seconds = 0;
 b70:	10 92 70 00 	sts	0x0070, r1
			}
		}
		LED_vTurnOff(LED_PORT, LED_YELLOW);
		yellow_time = 3;
		LED_vTurnOn(LED_PORT, LED_RED);
		while(red_time >= 0)
 b74:	11 23       	and	r17, r17
 b76:	3c f7       	brge	.-50     	; 0xb46 <main+0xca>
			{
				red_time--;
				seconds = 0;
			}
		}
		LED_vTurnOff(LED_PORT, LED_RED);
 b78:	84 e4       	ldi	r24, 0x44	; 68
 b7a:	60 e0       	ldi	r22, 0x00	; 0
 b7c:	0e 94 89 04 	call	0x912	; 0x912 <LED_vTurnOff>
		red_time = 7; 
    }
 b80:	99 cf       	rjmp	.-206    	; 0xab4 <main+0x38>

00000b82 <__vector_5>:
}

ISR(TIMER2_OVF_vect)
{
 b82:	1f 92       	push	r1
 b84:	0f 92       	push	r0
 b86:	0f b6       	in	r0, 0x3f	; 63
 b88:	0f 92       	push	r0
 b8a:	11 24       	eor	r1, r1
 b8c:	8f 93       	push	r24
	seconds++;
 b8e:	80 91 70 00 	lds	r24, 0x0070
 b92:	8f 5f       	subi	r24, 0xFF	; 255
 b94:	80 93 70 00 	sts	0x0070, r24
}
 b98:	8f 91       	pop	r24
 b9a:	0f 90       	pop	r0
 b9c:	0f be       	out	0x3f, r0	; 63
 b9e:	0f 90       	pop	r0
 ba0:	1f 90       	pop	r1
 ba2:	18 95       	reti

00000ba4 <__divmodqi4>:
 ba4:	87 fb       	bst	r24, 7
 ba6:	08 2e       	mov	r0, r24
 ba8:	06 26       	eor	r0, r22
 baa:	87 fd       	sbrc	r24, 7
 bac:	81 95       	neg	r24
 bae:	67 fd       	sbrc	r22, 7
 bb0:	61 95       	neg	r22
 bb2:	05 d0       	rcall	.+10     	; 0xbbe <__udivmodqi4>
 bb4:	0e f4       	brtc	.+2      	; 0xbb8 <__divmodqi4_1>
 bb6:	91 95       	neg	r25

00000bb8 <__divmodqi4_1>:
 bb8:	07 fc       	sbrc	r0, 7
 bba:	81 95       	neg	r24

00000bbc <__divmodqi4_exit>:
 bbc:	08 95       	ret

00000bbe <__udivmodqi4>:
 bbe:	99 1b       	sub	r25, r25
 bc0:	79 e0       	ldi	r23, 0x09	; 9
 bc2:	04 c0       	rjmp	.+8      	; 0xbcc <__udivmodqi4_ep>

00000bc4 <__udivmodqi4_loop>:
 bc4:	99 1f       	adc	r25, r25
 bc6:	96 17       	cp	r25, r22
 bc8:	08 f0       	brcs	.+2      	; 0xbcc <__udivmodqi4_ep>
 bca:	96 1b       	sub	r25, r22

00000bcc <__udivmodqi4_ep>:
 bcc:	88 1f       	adc	r24, r24
 bce:	7a 95       	dec	r23
 bd0:	c9 f7       	brne	.-14     	; 0xbc4 <__udivmodqi4_loop>
 bd2:	80 95       	com	r24
 bd4:	08 95       	ret

00000bd6 <_exit>:
 bd6:	f8 94       	cli

00000bd8 <__stop_program>:
 bd8:	ff cf       	rjmp	.-2      	; 0xbd8 <__stop_program>
